css link는 link:css ~ 해서 head에서 하는데
javascript link는 body의 마지막에서 script src= 형태로 하는 것이 보통이다. => 마지막에 안하면 javascript가 link된 이후의 HTML내용에는 접근 못할수 있음.
(브라우저는 HTML을 읽다가 script src= 만나면 HTML읽는것을 멈추고 javascript를 읽는데, 여기서 javascript가 script src= 이후의 HTML내용에 접근하려고 해도
 아직 브라우저가 해당 부분의 HTML을 읽지 않았기 때문에 원하는 결과가 나오지 못함. 이후 브라우저가 javascript를 다 읽고 나면 HTML을 마저 읽어나감.)

브라우저에서 inspect (f12)를 하면  HTML과 CSS를 우선적으로 확인할 수 있고
Console을 보면 javascript의 상태를 확인할 수 있다. 

javascript는 data type이 존재. (integer, string, boolean, array, null(자연적으로 발생 불가. 변수에 값이 없다는 것을 확실하게 하기 위해 null값을 의도적으로 지정), 
                            undefined(null과는 다름. 초기화 없이 선언한 변수를 사용할때, array에서 index범위 벗어난 값을 가져올때, 반환하지 않는 함수의 반환값을 쓰려고 할 때 등) 등등)

data type 확인은 typeof 변수명 또는 typeof(변수명) 으로 가능 / datatype간의 변화도 가능. 

마찬가지로 variable도 존재.

variable 명명법은 camelCase를 따름 (소문자로 시작, 단어사이 구분은 단어의 첫 문자를 대문자로 구분)
stirng만 포함된 변수를 명명할때는 전부 대문자를 사용하고 단어사이 구분은 snakecase로 하는 관습이 있음.
문자열 내에서 변수값을 사용하는 방법으로 `this is string variable ${변수명}` 하면 문자열 내의${변수명}이 해당 문자열 변수값으로 치환됨.
쌍따옴표 "" 나 따옴표 '' 가 아니라 백틱 ``를 사용해야 한다는 점을 유의.


새로운 variable을 생성하는 방법은 const와 let (+ 사장된 방식 var) 두가지가 존재. (패치 이전의 javascript는 var하나로 다 사용했음) (data type으로 선언하는 것이 아님)
const는 불변 (할당된 객체를 다른 객체로 바꿀수 없는 것이지, 할당된 객체 자체적으로 변화나 변경사항이 생기는 것은 가능. 즉 변수가 가르키는 주소가 바뀌는것이 아니면 됨.) 
let은 가변. (var는 let의 성질 + 어디서든 변경가능 + 선언했던 변수이름으로 또 선언할 수 있음. 위험함)

javascript의 object. obeject 선언은 
obeject이름 = { 
    멤버변수이름 = 값,
    멤버변수이름 = 값,  
} 형태로 이루어지며 중괄호 안에서 멤버 변수는 ,로 구분함

멤버 변수 호출은   객체.멤버변수  와   객체["멤버변수"]  두가지 방법으로 가능.
존재하지 않는 멤버 변수 호출후 값을 전달하면, 해당 멤버변수가 해당 값으로 새롭게 추가됨.

javascript의 function. function 선언은
function function이름(매개변수){
    기능;
} 형태로 이루어짐.
매개변수는 해당 블럭 내에서만 접근 가능한 local변수.

object내의 멤버함수 선언은
object이름{
    function이름 : function(매개변수){
        기능;
    },    
    function이름 : function(매개변수){
        기능;
    },    
} 형태로 이루어짐



javascript는 브라우저를 통해 HTML을 document라는 이름의 object로 전달받고 있음.
따라서 javascript에서 HTML을 연결하기 위한 노력은 따로 하지 않아도 됨. document객체로 HTML에 접근할 수 있음.
javascript코드에서 document객체는 자신이 연결된 HTML을 의미한다고 생각하면 됨.
(HTML에서 script태그의 scr어트리뷰트에 js를 올바로 전달했다면)

javascript에서 HTML의 태그(HTML의 element)에 접근하는 많은 방법이 존재.
특정 id를 가진 태그(객체)를 가져오는 방법 : document.getElementById("특정id")

특정 class를 가진 태그들(객체들)을 가져오는 방법 : document.getElementByClassName("특정class")
해당 class를 가진 태그가 한개든 여러개든 상관없이, 그 태그들의 array를 반환.

특정 tag들을 가져오는 방법 : getElementByTagName("특정tag")
해당 tag가 한개든 여러개든 상관없이 해당 태그 객체의 array를 반환.

querySelector() 는 css selector방식으로 태그를 가져올 수 있음. (정확히는 css selector자체를 전달)
예를 들어 cls1 라는 이름의 class내에 있는 h1 태그를
querySelector(".cls1 h1") 형태로 select할 수 있음.
다만 해당 조건에 맞는 태그가 여러개라도 첫번째 태그만을 가져옴
document.querySelector() 형태로 document에서만 selector를 사용하는 것이 아니라
특정 element에서도 selector를 사용 가능. 예를 들어 class가 "parent"인 div태그안에 button태그가 있다면
document.querySelector("#parent").querySelector("button") 형태로 button 태그 찾을 수 있음
document.querySelector("#parent") 를 변수로 저장한다면
변수.querySelector("button")형태로도 가능할 것.


querySelectorAll() 는 해당 조건에 맞는 태그들의 array를 반환 
(해당하는 태그가 1개만 존재해도 array로 반환)

javascript를 통해 css style을 얼마든지 변경 가능. 보통의 경우 해당 태그의 style을 javascript로 접근할때
객체.style.~~~ 형태로 접근 가능. 객체.style.color 라던가. 
다만 보통의 경우 style은 css에서 다루는 것이 좋음. 정확히 말하면 javascript에서 css에 직접 접근하는 것보다
javascript는 HTML에 접근하고, css도 HTML에 접근해서 스타일을 달성하는 것이 좋음.

보통의 경우 javascript에서 태그의 class를 변경하고 (태그의 class는 HTML에 접근하는 것이지 css에 접근하는 것이 아님)
해당 class에 대한 style을 css에서 다루도록 하는 것.
마찬가지로 javascript에서 모든것을 하려고 하는 것보다 HTMl에서 가능한 기능이 있다면 기능을 활용하는 것이 좋음
예를들어 div 안에 input과 button을 만들어서 쓰는 것보다 form안에 input 2개를 만들고 1개의 input의 type="submit"을 하는 방식.


javascript에서 태그의 class변경시 className으로 가져오는 것과 classList로 가져오는 두가지 방법이 존재.

javascript는 Event를 listen할 수 있음.
객체.addEventListener("add할 이벤트 ex)click", 이벤트가 호출할 함수이름)
해당 객체에서 해당 이벤트가 발생하면 해당 함수를 호출하여 실행함. 함수이름에()를 같이 쓰지 않도록 주의.
(자식 객체에서 일어난 이벤트는 부모 객체로 전달됨. event bubbling. 자식객체의 이벤트 동작 후 부모객체의 이벤트 동작으로 전파됨.)
(event의 전파를 막기 위해서는 따로 함수를 호출 해야 함)
함수이름() 이렇게 전달하면 해당 함수가 이벤트 발생과 상관없이 javascript의 해당 라인을 읽을때 실행되어 버림.
그리고 해당 함수를 호출할때 기본적으로 매개변수를 하나 전달받을 수 있다(첫번째 매개변수). 해당 매개변수에는 event발생과 관련된 정보들이 들어있음. 
그래서 호출하는 함수에서 해당 정보들을 다루는 기능을 작성할 수 있도록 함. 보통 매개변수명으로 event를 사용.
(좀 더 정확히는 event객체를 전달하고 그 객체에는 여러 정보가 들어있다.)
해당 함수에서 event.preventDefault(); 를 호출하면 event가 발생했을때 브라우저가 기본적으로 하는 행동들을 막을 수 있음.
예를 들어 submit이벤트 발생시, addEventListener로 더해진 함수를 호출 한 뒤에 새로고침이 기본적으로 이루어 지는데 저 함수를 호출하게 하면 새로고침을 하지 않음.
즉 evetListener가 호출한 함수가 끝나면, 브라우저의 해당 event에 대한 기본행동이 실행되므로, 
evetListener가 호출한 함수가 preventDefault() 를 호출하면 브라우저의 기본행동을 막음.


HTML element에서 발생할 수 있는 event는 매우 많기 때문에 외워서 사용하기보다
특정 HTML element web Apis mdn 으로 검색해서 찾아보면 감지 가능한 event들을 볼 수 있음.
혹은 console.dir(원하는 객체)로 해당 객체의 property를 열어보았을때 property중에
property이름 앞에 on이 붙어 있는 것들이 evnet listener

객체.on~~~ = 호출할함수이름;  형태로 위의 addEventListener()를 대체할 수 있음. 
on~~~에 해당하는 이벤트가 addEventListener의 매개변수로 전달되는 이벤트와 동일하다면.

다만 addEventListener는 removeEventListenner를 통해 evetListener를 제거할 수 있으므로 더 선호되는편.


HTML element중에 body, head, title 같은 녀석은
document.body 이런식으로 가져올 수 있음. 
(중요한 element라서 가능한 것. 나머지는 querySelector같은걸로 가져와야 함)


javascript에서의 항등연산자 2가지 존재
===(strict equal operator) : 타입까지 포함하여 정확하게 같은 값인지를 비교함
==(equal operator) : 타입이 다르더라도 타입캐스팅이 가능하다면 캐스팅 후 같은 값인지를 비교함
ex) 1 === true   -> false임
    1 == true    -> true임
    

raw string을 그대로 사용할때 실수가 생기면 에러를 발생시키지 않을 가능성이 높음.
무엇이 문제인지 직접 찾아야 함
raw string을 변수로 저장해서 해당 변수로 사용한다면 실수가 생겼을때 
variable not defined같은 에러를 발생시켜서 문제를 발견하기 쉬워질 확률이 높음.


classList : 해당 태그의 클래스 리스트를 반환. 클래스 리스트 내의 클래스들을 변경가능.
classList.contains("확인할클래스명")   -> 해당 클래스가 포함되어있는지 boolean 반환.
.remove() 해당 클래스 제거.
.add() 해당 클래스 추가(중복될경우 추가안함) 등의 메소드 존재.

if문으로 클래스가 있다면 제거 / 없다면 추가 등의 동작을 매우 자주하다 보니 해당 동작을
한번에 해주는 메소드 존재. 
classList.toggle("해당클래스이름")   -> 해당 클래스가 list내에 존재하면 제거, 없으면 추가


기본적으로 브라우저에 무언가를 저장할수 있는 저장 공간 localStorage 
브라우저 -> f12 -> consle창 옆에 찾아보면 application 창 있음. 그 안에 local storage 정보 확인 가능
가장 다루기 쉬운 저장공간. localStorage는 매우 많은 메소드를 제공함
localStorage.setItem("저장할 값의 이름", 저장할값)   -> key 와 value
localStorage.getItem("찾아올 값의 이름")      해당 이름으로 값이 없을경우 null을 반환.
localStorage.removeItem("지우고 싶은 값의 이름")


  